{"$message_type":"diagnostic","message":"unused imports: `Color` and `SetForegroundColor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":239,"byte_end":257,"line_start":5,"line_end":5,"column_start":28,"column_end":46,"is_primary":true,"text":[{"text":"    cursor, style::{Print, SetForegroundColor, Color},","highlight_start":28,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":259,"byte_end":264,"line_start":5,"line_end":5,"column_start":48,"column_end":53,"is_primary":true,"text":[{"text":"    cursor, style::{Print, SetForegroundColor, Color},","highlight_start":48,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":231,"byte_end":232,"line_start":5,"line_end":5,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    cursor, style::{Print, SetForegroundColor, Color},","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":237,"byte_end":264,"line_start":5,"line_end":5,"column_start":26,"column_end":53,"is_primary":true,"text":[{"text":"    cursor, style::{Print, SetForegroundColor, Color},","highlight_start":26,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":264,"byte_end":265,"line_start":5,"line_end":5,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"    cursor, style::{Print, SetForegroundColor, Color},","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Color` and `SetForegroundColor`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    cursor, style::{Print, SetForegroundColor, Color},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Write`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":37,"byte_end":42,"line_start":1,"line_end":1,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"use std::{time::Duration, io::{self, Write}};","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Write`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{time::Duration, io::{self, Write}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":8053,"byte_end":8128,"line_start":134,"line_end":134,"column_start":25,"column_end":100,"is_primary":true,"text":[{"text":"                        KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":25,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:134:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1267,"byte_end":11348,"line_start":29,"line_end":180,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            match read()? {","highlight_start":13,"highlight_end":28},{"text":"                // Handle key events","highlight_start":1,"highlight_end":37},{"text":"                Event::Key(key_event) => {","highlight_start":1,"highlight_end":43},{"text":"                    match key_event {","highlight_start":1,"highlight_end":38},{"text":"                        // Exit on Ctrl+Q","highlight_start":1,"highlight_end":42},{"text":"                        KeyEvent { code: KeyCode::Char('q'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        KeyEvent { code: KeyCode::Char('m'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        KeyEvent { code: KeyCode::Char('w'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            // Clear the input line and prompt for ID","highlight_start":1,"highlight_end":70},{"text":"                            execute!(stdout, Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":78},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            let mut id_input = String::new(); // To store the user's input for the ID","highlight_start":1,"highlight_end":102},{"text":"                            // Read characters for the ID input","highlight_start":1,"highlight_end":64},{"text":"                            loop {","highlight_start":1,"highlight_end":35},{"text":"                                if poll(Duration::from_millis(500))? {","highlight_start":1,"highlight_end":71},{"text":"                                    match read()? {","highlight_start":1,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // After getting the ID, you can do something with it, like print it","highlight_start":1,"highlight_end":97},{"text":"                            execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input","highlight_start":1,"highlight_end":147},{"text":"                            execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID","highlight_start":1,"highlight_end":119},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Enter key: send/print the message","highlight_start":1,"highlight_end":68},{"text":"                        KeyEvent { code: KeyCode::Enter, .. } => {","highlight_start":1,"highlight_end":67},{"text":"                            // If the message line is at the top, we can scroll down","highlight_start":1,"highlight_end":85},{"text":"                            if message_line < input_line - 2 {","highlight_start":1,"highlight_end":63},{"text":"                                message_line += 1; // Move to the next line for the next message","highlight_start":1,"highlight_end":97},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                // Clear the screen and redraw the box and messages","highlight_start":1,"highlight_end":84},{"text":"                                execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0))?;","highlight_start":1,"highlight_end":96},{"text":"                                execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                execute!(stdout, Print(\"|\".to_string() + &\" \".repeat((cols - 2) as usize) + \"|\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                ","highlight_start":1,"highlight_end":33},{"text":"                                // Reset message line position to allow for new messages","highlight_start":1,"highlight_end":89},{"text":"                                message_line = 0;","highlight_start":1,"highlight_end":50},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Move to the next line to print the message","highlight_start":1,"highlight_end":74},{"text":"                            execute!(stdout, cursor::MoveTo(1, message_line), Print(&message))?;","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Clear the message input line","highlight_start":1,"highlight_end":60},{"text":"                            message.clear(); // Clear the message in memory","highlight_start":1,"highlight_end":76},{"text":"                            ","highlight_start":1,"highlight_end":29},{"text":"                            // Move back to the input line","highlight_start":1,"highlight_end":59},{"text":"                            execute!(","highlight_start":1,"highlight_end":38},{"text":"                                stdout,","highlight_start":1,"highlight_end":40},{"text":"                                cursor::MoveTo(1, input_line),         // Move cursor to input line","highlight_start":1,"highlight_end":100},{"text":"                                Clear(ClearType::CurrentLine)         // Clear the current line","highlight_start":1,"highlight_end":96},{"text":"                            )?;","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle regular character input","highlight_start":1,"highlight_end":58},{"text":"                        KeyEvent { code: KeyCode::Char(c), .. } => {","highlight_start":1,"highlight_end":69},{"text":"                            // Append the character to the message string","highlight_start":1,"highlight_end":74},{"text":"                            message.push(c);","highlight_start":1,"highlight_end":45},{"text":"                            // Print the character on the screen","highlight_start":1,"highlight_end":65},{"text":"                            execute!(stdout, Print(c))?;","highlight_start":1,"highlight_end":57},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Backspace key","highlight_start":1,"highlight_end":48},{"text":"                        KeyEvent { code: KeyCode::Backspace, .. } => {","highlight_start":1,"highlight_end":71},{"text":"                            if !message.is_empty() {","highlight_start":1,"highlight_end":53},{"text":"                                message.pop(); // Remove the last character from the message","highlight_start":1,"highlight_end":93},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Clear the area of the input box","highlight_start":1,"highlight_end":63},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":109},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Print the updated message","highlight_start":1,"highlight_end":57},{"text":"                            execute!(stdout, Print(&message))?;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Move the cursor back to the end of the input line","highlight_start":1,"highlight_end":81},{"text":"                            execute!(stdout, cursor::MoveTo((message.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":103},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Ctrl + J","highlight_start":1,"highlight_end":43},{"text":"                        KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            // Clear the input line and prompt for ID","highlight_start":1,"highlight_end":70},{"text":"                            execute!(stdout, Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":78},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            let mut id_input = String::new(); // To store the user's input for the ID","highlight_start":1,"highlight_end":102},{"text":"                            // Read characters for the ID input","highlight_start":1,"highlight_end":64},{"text":"                            loop {","highlight_start":1,"highlight_end":35},{"text":"                                if poll(Duration::from_millis(500))? {","highlight_start":1,"highlight_end":71},{"text":"                                    match read()? {","highlight_start":1,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // After getting the ID, you can do something with it, like print it","highlight_start":1,"highlight_end":97},{"text":"                            execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input","highlight_start":1,"highlight_end":147},{"text":"                            execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID","highlight_start":1,"highlight_end":119},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => {} // Handle other keys that are not defined","highlight_start":1,"highlight_end":74},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {} // Handle non-key events (if any)","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::single_match)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1267,"byte_end":11348,"line_start":29,"line_end":180,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            match read()? {","highlight_start":13,"highlight_end":28},{"text":"                // Handle key events","highlight_start":1,"highlight_end":37},{"text":"                Event::Key(key_event) => {","highlight_start":1,"highlight_end":43},{"text":"                    match key_event {","highlight_start":1,"highlight_end":38},{"text":"                        // Exit on Ctrl+Q","highlight_start":1,"highlight_end":42},{"text":"                        KeyEvent { code: KeyCode::Char('q'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        KeyEvent { code: KeyCode::Char('m'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        KeyEvent { code: KeyCode::Char('w'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            // Clear the input line and prompt for ID","highlight_start":1,"highlight_end":70},{"text":"                            execute!(stdout, Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":78},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            let mut id_input = String::new(); // To store the user's input for the ID","highlight_start":1,"highlight_end":102},{"text":"                            // Read characters for the ID input","highlight_start":1,"highlight_end":64},{"text":"                            loop {","highlight_start":1,"highlight_end":35},{"text":"                                if poll(Duration::from_millis(500))? {","highlight_start":1,"highlight_end":71},{"text":"                                    match read()? {","highlight_start":1,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // After getting the ID, you can do something with it, like print it","highlight_start":1,"highlight_end":97},{"text":"                            execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input","highlight_start":1,"highlight_end":147},{"text":"                            execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID","highlight_start":1,"highlight_end":119},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Enter key: send/print the message","highlight_start":1,"highlight_end":68},{"text":"                        KeyEvent { code: KeyCode::Enter, .. } => {","highlight_start":1,"highlight_end":67},{"text":"                            // If the message line is at the top, we can scroll down","highlight_start":1,"highlight_end":85},{"text":"                            if message_line < input_line - 2 {","highlight_start":1,"highlight_end":63},{"text":"                                message_line += 1; // Move to the next line for the next message","highlight_start":1,"highlight_end":97},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                // Clear the screen and redraw the box and messages","highlight_start":1,"highlight_end":84},{"text":"                                execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0))?;","highlight_start":1,"highlight_end":96},{"text":"                                execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                execute!(stdout, Print(\"|\".to_string() + &\" \".repeat((cols - 2) as usize) + \"|\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;","highlight_start":1,"highlight_end":118},{"text":"                                ","highlight_start":1,"highlight_end":33},{"text":"                                // Reset message line position to allow for new messages","highlight_start":1,"highlight_end":89},{"text":"                                message_line = 0;","highlight_start":1,"highlight_end":50},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Move to the next line to print the message","highlight_start":1,"highlight_end":74},{"text":"                            execute!(stdout, cursor::MoveTo(1, message_line), Print(&message))?;","highlight_start":1,"highlight_end":97},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Clear the message input line","highlight_start":1,"highlight_end":60},{"text":"                            message.clear(); // Clear the message in memory","highlight_start":1,"highlight_end":76},{"text":"                            ","highlight_start":1,"highlight_end":29},{"text":"                            // Move back to the input line","highlight_start":1,"highlight_end":59},{"text":"                            execute!(","highlight_start":1,"highlight_end":38},{"text":"                                stdout,","highlight_start":1,"highlight_end":40},{"text":"                                cursor::MoveTo(1, input_line),         // Move cursor to input line","highlight_start":1,"highlight_end":100},{"text":"                                Clear(ClearType::CurrentLine)         // Clear the current line","highlight_start":1,"highlight_end":96},{"text":"                            )?;","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle regular character input","highlight_start":1,"highlight_end":58},{"text":"                        KeyEvent { code: KeyCode::Char(c), .. } => {","highlight_start":1,"highlight_end":69},{"text":"                            // Append the character to the message string","highlight_start":1,"highlight_end":74},{"text":"                            message.push(c);","highlight_start":1,"highlight_end":45},{"text":"                            // Print the character on the screen","highlight_start":1,"highlight_end":65},{"text":"                            execute!(stdout, Print(c))?;","highlight_start":1,"highlight_end":57},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Backspace key","highlight_start":1,"highlight_end":48},{"text":"                        KeyEvent { code: KeyCode::Backspace, .. } => {","highlight_start":1,"highlight_end":71},{"text":"                            if !message.is_empty() {","highlight_start":1,"highlight_end":53},{"text":"                                message.pop(); // Remove the last character from the message","highlight_start":1,"highlight_end":93},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Clear the area of the input box","highlight_start":1,"highlight_end":63},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":109},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Print the updated message","highlight_start":1,"highlight_end":57},{"text":"                            execute!(stdout, Print(&message))?;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // Move the cursor back to the end of the input line","highlight_start":1,"highlight_end":81},{"text":"                            execute!(stdout, cursor::MoveTo((message.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":103},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        // Handle Ctrl + J","highlight_start":1,"highlight_end":43},{"text":"                        KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {","highlight_start":1,"highlight_end":105},{"text":"                            // Clear the input line and prompt for ID","highlight_start":1,"highlight_end":70},{"text":"                            execute!(stdout, Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":78},{"text":"                            execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;","highlight_start":1,"highlight_end":98},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            let mut id_input = String::new(); // To store the user's input for the ID","highlight_start":1,"highlight_end":102},{"text":"                            // Read characters for the ID input","highlight_start":1,"highlight_end":64},{"text":"                            loop {","highlight_start":1,"highlight_end":35},{"text":"                                if poll(Duration::from_millis(500))? {","highlight_start":1,"highlight_end":71},{"text":"                                    match read()? {","highlight_start":1,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            // After getting the ID, you can do something with it, like print it","highlight_start":1,"highlight_end":97},{"text":"                            execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input","highlight_start":1,"highlight_end":147},{"text":"                            execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID","highlight_start":1,"highlight_end":119},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => {} // Handle other keys that are not defined","highlight_start":1,"highlight_end":74},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {} // Handle non-key events (if any)","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"if let Event::Key(key_event) = read()? {\n                match key_event {\n                    // Exit on Ctrl+Q\n                    KeyEvent { code: KeyCode::Char('q'), modifiers: KeyModifiers::CONTROL, .. } => {\n                        break;\n                    }\n                    KeyEvent { code: KeyCode::Char('m'), modifiers: KeyModifiers::CONTROL, .. } => {\n                        break;\n                    }\n                    KeyEvent { code: KeyCode::Char('w'), modifiers: KeyModifiers::CONTROL, .. } => {\n                        // Clear the input line and prompt for ID\n                        execute!(stdout, Clear(ClearType::CurrentLine))?;\n                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;\n\n                        let mut id_input = String::new(); // To store the user's input for the ID\n                        // Read characters for the ID input\n                        loop {\n                            if poll(Duration::from_millis(500))? {\n                                match read()? {\n                                    Event::Key(KeyEvent { code, modifiers, .. }) => {\n                                        match (code, modifiers) {\n                                            (KeyCode::Enter, _) => {\n                                                break; // Break on Enter\n                                            }\n                                            (KeyCode::Backspace, _) => {\n                                                if !id_input.is_empty() {\n                                                    id_input.pop(); // Remove the last character\n                                                    // Clear the ID input line\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\n                                                    execute!(stdout, Print(&id_input))?; // Print the updated ID\n                                                    // Move cursor to the end of the ID input\n                                                    execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\n                                                }\n                                            }\n                                            (KeyCode::Char(c), _) => {\n                                                id_input.push(c); // Append the character to the ID input\n                                                execute!(stdout, Print(c))?; // Print the character\n                                            }\n                                            _ => {}\n                                        }\n                                    }\n                                    _ => {}\n                                }\n                            }\n                        }\n\n                        // After getting the ID, you can do something with it, like print it\n                        execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input\n                        execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID\n                    }\n                    // Handle Enter key: send/print the message\n                    KeyEvent { code: KeyCode::Enter, .. } => {\n                        // If the message line is at the top, we can scroll down\n                        if message_line < input_line - 2 {\n                            message_line += 1; // Move to the next line for the next message\n                        } else {\n                            // Clear the screen and redraw the box and messages\n                            execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0))?;\n                            execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;\n                            execute!(stdout, Print(\"|\".to_string() + &\" \".repeat((cols - 2) as usize) + \"|\\n\"))?;\n                            execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;\n                            \n                            // Reset message line position to allow for new messages\n                            message_line = 0;\n                        }\n\n                        // Move to the next line to print the message\n                        execute!(stdout, cursor::MoveTo(1, message_line), Print(&message))?;\n\n                        // Clear the message input line\n                        message.clear(); // Clear the message in memory\n                        \n                        // Move back to the input line\n                        execute!(\n                            stdout,\n                            cursor::MoveTo(1, input_line),         // Move cursor to input line\n                            Clear(ClearType::CurrentLine)         // Clear the current line\n                        )?;\n                    }\n                    // Handle regular character input\n                    KeyEvent { code: KeyCode::Char(c), .. } => {\n                        // Append the character to the message string\n                        message.push(c);\n                        // Print the character on the screen\n                        execute!(stdout, Print(c))?;\n                    }\n                    // Handle Backspace key\n                    KeyEvent { code: KeyCode::Backspace, .. } => {\n                        if !message.is_empty() {\n                            message.pop(); // Remove the last character from the message\n                        }\n\n                        // Clear the area of the input box\n                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\n\n                        // Print the updated message\n                        execute!(stdout, Print(&message))?;\n\n                        // Move the cursor back to the end of the input line\n                        execute!(stdout, cursor::MoveTo((message.len() + 1) as u16, input_line))?;\n                    }\n                    // Handle Ctrl + J\n                    KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {\n                        // Clear the input line and prompt for ID\n                        execute!(stdout, Clear(ClearType::CurrentLine))?;\n                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;\n\n                        let mut id_input = String::new(); // To store the user's input for the ID\n                        // Read characters for the ID input\n                        loop {\n                            if poll(Duration::from_millis(500))? {\n                                match read()? {\n                                    Event::Key(KeyEvent { code, modifiers, .. }) => {\n                                        match (code, modifiers) {\n                                            (KeyCode::Enter, _) => {\n                                                break; // Break on Enter\n                                            }\n                                            (KeyCode::Backspace, _) => {\n                                                if !id_input.is_empty() {\n                                                    id_input.pop(); // Remove the last character\n                                                    // Clear the ID input line\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\n                                                    execute!(stdout, Print(&id_input))?; // Print the updated ID\n                                                    // Move cursor to the end of the ID input\n                                                    execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\n                                                }\n                                            }\n                                            (KeyCode::Char(c), _) => {\n                                                id_input.push(c); // Append the character to the ID input\n                                                execute!(stdout, Print(c))?; // Print the character\n                                            }\n                                            _ => {}\n                                        }\n                                    }\n                                    _ => {}\n                                }\n                            }\n                        }\n\n                        // After getting the ID, you can do something with it, like print it\n                        execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input\n                        execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID\n                    }\n                    _ => {} // Handle other keys that are not defined\n                }\n            }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                // Handle key events\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Event::Key(key_event) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    match key_event {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {} // Handle non-key events (if any)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_match)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mif let Event::Key(key_event) = read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 match key_event {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     // Exit on Ctrl+Q\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Char('q'), modifiers: KeyModifiers::CONTROL, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Char('m'), modifiers: KeyModifiers::CONTROL, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Char('w'), modifiers: KeyModifiers::CONTROL, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Clear the input line and prompt for ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         let mut id_input = String::new(); // To store the user's input for the ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Read characters for the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             if poll(Duration::from_millis(500))? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 match read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     Event::Key(KeyEvent { code, modifiers, .. }) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 break; // Break on Enter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Backspace, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !id_input.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     id_input.pop(); // Remove the last character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Clear the ID input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, Print(&id_input))?; // Print the updated ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Move cursor to the end of the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Char(c), _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 id_input.push(c); // Append the character to the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 execute!(stdout, Print(c))?; // Print the character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // After getting the ID, you can do something with it, like print it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     // Handle Enter key: send/print the message\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Enter, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // If the message line is at the top, we can scroll down\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         if message_line < input_line - 2 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             message_line += 1; // Move to the next line for the next message\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             // Clear the screen and redraw the box and messages\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             execute!(stdout, Print(\"|\".to_string() + &\" \".repeat((cols - 2) as usize) + \"|\\n\"))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             execute!(stdout, Print(\"+\".to_string() + &\"-\".repeat((cols - 2) as usize) + \"+\\n\"))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             // Reset message line position to allow for new messages\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             message_line = 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Move to the next line to print the message\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(1, message_line), Print(&message))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Clear the message input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         message.clear(); // Clear the message in memory\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Move back to the input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             stdout,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             cursor::MoveTo(1, input_line),         // Move cursor to input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             Clear(ClearType::CurrentLine)         // Clear the current line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         )?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     // Handle regular character input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Char(c), .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Append the character to the message string\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         message.push(c);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Print the character on the screen\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Print(c))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     // Handle Backspace key\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Backspace, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if !message.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             message.pop(); // Remove the last character from the message\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Clear the area of the input box\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Print the updated message\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Print(&message))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Move the cursor back to the end of the input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo((message.len() + 1) as u16, input_line))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     // Handle Ctrl + J\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     KeyEvent { code: KeyCode::Char('j'), modifiers: KeyModifiers::CONTROL, .. } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Clear the input line and prompt for ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         let mut id_input = String::new(); // To store the user's input for the ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // Read characters for the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if poll(Duration::from_millis(500))? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 match read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     Event::Key(KeyEvent { code, modifiers, .. }) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 break; // Break on Enter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Backspace, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !id_input.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     id_input.pop(); // Remove the last character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Clear the ID input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, Print(&id_input))?; // Print the updated ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Move cursor to the end of the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Char(c), _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 id_input.push(c); // Append the character to the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 execute!(stdout, Print(c))?; // Print the character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         // After getting the ID, you can do something with it, like print it\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, cursor::MoveTo(0, input_line + 1), Clear(ClearType::CurrentLine))?; // Clear the line below the input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         execute!(stdout, Print(format!(\"You entered ID: {}\", id_input)))?; // Print the entered ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => {} // Handle other keys that are not defined\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":2435,"byte_end":4454,"line_start":49,"line_end":74,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"                                    match read()? {","highlight_start":37,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2435,"byte_end":4454,"line_start":49,"line_end":74,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"                                    match read()? {","highlight_start":37,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":"if let Event::Key(KeyEvent { code, modifiers, .. }) = read()? {\n                                        match (code, modifiers) {\n                                            (KeyCode::Enter, _) => {\n                                                break; // Break on Enter\n                                            }\n                                            (KeyCode::Backspace, _) => {\n                                                if !id_input.is_empty() {\n                                                    id_input.pop(); // Remove the last character\n                                                    // Clear the ID input line\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\n                                                    execute!(stdout, Print(&id_input))?; // Print the updated ID\n                                                    // Move cursor to the end of the ID input\n                                                    execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\n                                                }\n                                            }\n                                            (KeyCode::Char(c), _) => {\n                                                id_input.push(c); // Append the character to the ID input\n                                                execute!(stdout, Print(c))?; // Print the character\n                                            }\n                                            _ => {}\n                                        }\n                                    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   match read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Event::Key(KeyEvent { code, modifiers, .. }) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                               (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10mif let Event::Key(KeyEvent { code, modifiers, .. }) = read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 break; // Break on Enter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Backspace, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !id_input.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     id_input.pop(); // Remove the last character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Clear the ID input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, Print(&id_input))?; // Print the updated ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Move cursor to the end of the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Char(c), _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 id_input.push(c); // Append the character to the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 execute!(stdout, Print(c))?; // Print the character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":8689,"byte_end":10708,"line_start":143,"line_end":168,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"                                    match read()? {","highlight_start":37,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":8689,"byte_end":10708,"line_start":143,"line_end":168,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"                                    match read()? {","highlight_start":37,"highlight_end":52},{"text":"                                        Event::Key(KeyEvent { code, modifiers, .. }) => {","highlight_start":1,"highlight_end":90},{"text":"                                            match (code, modifiers) {","highlight_start":1,"highlight_end":70},{"text":"                                                (KeyCode::Enter, _) => {","highlight_start":1,"highlight_end":73},{"text":"                                                    break; // Break on Enter","highlight_start":1,"highlight_end":77},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Backspace, _) => {","highlight_start":1,"highlight_end":77},{"text":"                                                    if !id_input.is_empty() {","highlight_start":1,"highlight_end":78},{"text":"                                                        id_input.pop(); // Remove the last character","highlight_start":1,"highlight_end":101},{"text":"                                                        // Clear the ID input line","highlight_start":1,"highlight_end":83},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;","highlight_start":1,"highlight_end":137},{"text":"                                                        execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt","highlight_start":1,"highlight_end":148},{"text":"                                                        execute!(stdout, Print(&id_input))?; // Print the updated ID","highlight_start":1,"highlight_end":117},{"text":"                                                        // Move cursor to the end of the ID input","highlight_start":1,"highlight_end":98},{"text":"                                                        execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;","highlight_start":1,"highlight_end":132},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                (KeyCode::Char(c), _) => {","highlight_start":1,"highlight_end":75},{"text":"                                                    id_input.push(c); // Append the character to the ID input","highlight_start":1,"highlight_end":110},{"text":"                                                    execute!(stdout, Print(c))?; // Print the character","highlight_start":1,"highlight_end":104},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {}","highlight_start":1,"highlight_end":56},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {}","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":"if let Event::Key(KeyEvent { code, modifiers, .. }) = read()? {\n                                        match (code, modifiers) {\n                                            (KeyCode::Enter, _) => {\n                                                break; // Break on Enter\n                                            }\n                                            (KeyCode::Backspace, _) => {\n                                                if !id_input.is_empty() {\n                                                    id_input.pop(); // Remove the last character\n                                                    // Clear the ID input line\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\n                                                    execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\n                                                    execute!(stdout, Print(&id_input))?; // Print the updated ID\n                                                    // Move cursor to the end of the ID input\n                                                    execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\n                                                }\n                                            }\n                                            (KeyCode::Char(c), _) => {\n                                                id_input.push(c); // Append the character to the ID input\n                                                execute!(stdout, Print(c))?; // Print the character\n                                            }\n                                            _ => {}\n                                        }\n                                    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:143:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   match read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Event::Key(KeyEvent { code, modifiers, .. }) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                               (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10mif let Event::Key(KeyEvent { code, modifiers, .. }) = read()? {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match (code, modifiers) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Enter, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 break; // Break on Enter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Backspace, _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !id_input.is_empty() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     id_input.pop(); // Remove the last character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Clear the ID input line\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Clear(ClearType::CurrentLine))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo(1, input_line), Print(\"What ID? \"))?; // Reprint the prompt\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, Print(&id_input))?; // Print the updated ID\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     // Move cursor to the end of the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     execute!(stdout, cursor::MoveTo((id_input.len() + 1) as u16, input_line))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             (KeyCode::Char(c), _) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 id_input.push(c); // Append the character to the ID input\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 execute!(stdout, Print(c))?; // Print the character\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}
